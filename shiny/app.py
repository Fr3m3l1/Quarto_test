# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

import os

os.environ['R_HOME'] = r'C:\Program Files\R\R-4.4.2'
os.environ['PATH'] = (
    r'C:\Program Files\R\R-4.4.2\bin\x64;'
    r'C:\Program Files\R\R-4.4.2\library\stats\libs\x64;'  # Direct DLL path
    + os.environ['PATH']
)

# Set R to use UTF-8 encoding for messages
os.environ['LC_ALL'] = 'en_US.UTF-8'  # Forces UTF-8 locale
os.environ['LANG'] = 'en_US.UTF-8'    # For compatibility

import seaborn as sns
from shiny import reactive
from shiny.express import render, ui
import rpy2.robjects as robjects
from rpy2.robjects import pandas2ri
import rpy2.robjects.packages as rpackages
from rpy2.robjects.packages import importr
from rpy2.robjects.vectors import StrVector
import tempfile
from pathlib import Path


# Initialize R conversion
pandas2ri.activate()

# Install required R packages if missing
base = importr('base')
utils = importr('utils')
# select a mirror for R packages
utils.chooseCRANmirror(ind=1) # select the first mirror in the list

# Load data
penguins = sns.load_dataset("penguins")

# R package names
packnames = ('ggplot2', 'stats')
names_to_install = [x for x in packnames if not rpackages.isinstalled(x)]
if len(names_to_install) > 0:
    utils.install_packages(StrVector(names_to_install))

# Test R connectivity
try:
    stats = importr('stats')
    print(stats.rnorm(5))  # Should print 5 random numbers
except Exception as e:
    print(f"R connection failed: {e}")


# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    species = list(penguins["species"].value_counts().index)
    ui.input_checkbox_group(
        "species", "Species:",
        species, selected=species
    )

    islands = list(penguins["island"].value_counts().index)
    ui.input_checkbox_group(
        "islands", "Islands:",
        islands, selected=islands
    )

    @reactive.calc
    def filtered_penguins():
        data = penguins[penguins["species"].isin(input.species())]
        return data[data["island"].isin(input.islands())]

    # ========================================================================

    ui.input_select("dist", "Distribution:", choices=["kde", "hist"])
    ui.input_checkbox("rug", "Show rug marks", value=False)

    # ========================================================================

    @render.plot
    def depth():
        return sns.displot(
            filtered_penguins(), x="bill_depth_mm",
            hue="species", kind=input.dist(),
            fill=True, rug=input.rug()
        )

    @render.plot
    def length():
        return sns.displot(
            filtered_penguins(), x="bill_length_mm",
            hue="species", kind=input.dist(),
            fill=True, rug=input.rug()
        )

    # ========================================================================

    @reactive.calc
    def filtered_penguins():
        # Apply filters and remove missing values
        data = penguins[penguins["species"].isin(input.species())]
        data = data[data["island"].isin(input.islands())]
        return data.dropna()  # Handle NA in Python

    @render.text
    def mass_r():
        # Convert cleaned data to R dataframe
        r_df = pandas2ri.py2rpy(filtered_penguins())
    
        # Modified R analysis code (no na.omit needed)
        analysis_output = robjects.r('''
            function(data) {
                model <- stats::lm(body_mass_g ~ bill_length_mm + species, data = data)
                capture.output({
                    base::cat("Linear Model Summary:\\n\\n")
                    base::print(summary(model))
                    base::cat("\\n\\nCoefficient Details:\\n")
                    base::print(stats::confint(model))
                })
            }
        ''')(r_df)
    
        return f"```\n{analysis_output[0]}\n```"

    # ========================================================================

    @render.data_frame
    def dataview():
        return render.DataGrid(filtered_penguins())

    # ========================================================================

    pi = robjects.r['pi']
    print(pi[0])

    # ========================================================================



    return None


_static_assets = ["example_files","shiny\\example_files\\libs\\quarto-html\\tippy.css","shiny\\example_files\\libs\\quarto-html\\quarto-syntax-highlighting-01c78b5cd655e4cd89133cf59d535862.css","shiny\\example_files\\libs\\bootstrap\\bootstrap-icons.css","shiny\\example_files\\libs\\bootstrap\\bootstrap-73ee74f93a40d4dab1116e96601a2f16.min.css","shiny\\example_files\\libs\\quarto-dashboard\\datatables.min.css","shiny\\example_files\\libs\\clipboard\\clipboard.min.js","shiny\\example_files\\libs\\quarto-html\\quarto.js","shiny\\example_files\\libs\\quarto-html\\popper.min.js","shiny\\example_files\\libs\\quarto-html\\tippy.umd.min.js","shiny\\example_files\\libs\\quarto-html\\anchor.min.js","shiny\\example_files\\libs\\bootstrap\\bootstrap.min.js","shiny\\example_files\\libs\\quarto-dashboard\\quarto-dashboard.js","shiny\\example_files\\libs\\quarto-dashboard\\stickythead.js","shiny\\example_files\\libs\\quarto-dashboard\\datatables.min.js","shiny\\example_files\\libs\\quarto-dashboard\\pdfmake.min.js","shiny\\example_files\\libs\\quarto-dashboard\\vfs_fonts.js","shiny\\example_files\\libs\\quarto-dashboard\\web-components.js","shiny\\example_files\\libs\\quarto-dashboard\\components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "example.html",
    server,
    static_assets=_static_assets,
)
