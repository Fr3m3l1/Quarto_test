---
title: "Microbiome Analysis Dashboard"
format: html
runtime: shiny
execute:
  echo: true
---

## R Setup: Phyloseq and Analysis Functions

```{r}
print(.libPaths())
.libPaths(Sys.getenv("R_LIBS_USER"))

print(.libPaths())

library(vegan)
library(DESeq2)
library(plotly)
library(ggplot2)

process_microbiome_data <- function() {
    data <- read.delim("./ms-project_Excel_output.csv", row.names = 1)

    # Extract components
    otu_counts <- as.matrix(data[, 11:ncol(data)])
    tax_table <- data[, 1:10]
    sample_names <- colnames(data[, 11:ncol(data)])

    # Create sample metadata
    sample_data <- data.frame(
        Sample = sample_names,
        Group = ifelse(grepl("^A", sample_names), "Group1", "Group2"),
        row.names = sample_names
    )

    list(otu_counts = otu_counts, tax_table = tax_table, sample_data = sample_data)
}

alpha_diversity <- function(data_list, measures) {
    otu_counts <- data_list$otu_counts
    sample_data <- data_list$sample_data
    otu_t <- t(otu_counts)

    alpha_metrics <- data.frame(Sample = rownames(otu_t))

    if ("Chao1" %in% measures) {
        alpha_metrics$Chao1 <- estimateR(otu_t)["S.chao1", ]
    }
    if ("Shannon" %in% measures) {
        alpha_metrics$Shannon <- diversity(otu_t, index = "shannon")
    }
    if ("Simpson" %in% measures) {
        alpha_metrics$Simpson <- diversity(otu_t, index = "simpson")
    }

    merge(alpha_metrics, sample_data, by.x = "Sample", by.y = "row.names")
}

create_alpha_plot <- function(alpha_df, metric) {
    p <- ggplot(alpha_df, aes(x = Group, y = .data[[metric]], fill = Group)) +
        geom_boxplot() +
        labs(title = paste(metric, "Diversity")) +
        theme_bw()
    ggplotly(p)
}

beta_diversity <- function(data_list, method = "bray") {
    otu_counts <- data_list$otu_counts
    sample_data <- data_list$sample_data
    otu_t <- t(otu_counts)

    dist_matrix <- vegdist(otu_t, method = method)
    pcoa <- cmdscale(dist_matrix, eig = TRUE, k = 2)
    scores <- as.data.frame(pcoa$points)
    colnames(scores) <- c("PC1", "PC2")
    scores$Sample <- rownames(scores)

    list(
        scores = merge(scores, sample_data, by.x = "Sample", by.y = "row.names"),
        eig = pcoa$eig
    )
}

create_ordination_plot <- function(beta_result) {
    variance <- beta_result$eig[1:2] / sum(beta_result$eig) * 100
    scores <- beta_result$scores

    p <- ggplot(scores, aes(x = PC1, y = PC2, color = Group)) +
        geom_point(size = 3) +
        labs(
            x = paste0("PC1 (", round(variance[1], 2), "%)"),
            y = paste0("PC2 (", round(variance[2], 2), "%)")
        ) +
        theme_bw()
    ggplotly(p)
}

diff_abundance <- function(data_list) {
    otu_counts <- data_list$otu_counts
    sample_data <- data_list$sample_data

    dds <- DESeqDataSetFromMatrix(
        countData = as.matrix(otu_counts),
        colData = sample_data,
        design = ~Group
    )
    dds <- DESeq(dds)
    as.data.frame(results(dds))
}

permanova_test <- function(data_list, method = "bray") {
    otu_counts <- data_list$otu_counts
    sample_data <- data_list$sample_data
    otu_t <- t(otu_counts)

    dist_matrix <- vegdist(otu_t, method = method)
    result <- adonis2(dist_matrix ~ Group, data = sample_data)
    capture.output(print(result))
}
```

```{python}
#| python.reticulate: false
#| warning: false

from shiny import App, ui, render, reactive
import rpy2.robjects as ro
from rpy2.robjects import pandas2ri
from rpy2.robjects.conversion import localconverter
pandas2ri.activate()

app_ui = ui.page_fluid(
    ui.h2("Microbiome Analysis Dashboard"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_select("tax_level", "Taxonomic Level", 
                          ["Phylum", "Class", "Order", "Family", "Genus"]),
            ui.input_select("alpha_metric", "Alpha Diversity Metric",
                          ["Chao1", "Shannon", "Simpson"]),
            ui.input_action_button("run_analysis", "Run Analysis")
        ),
        ui.panel_main(
            ui.navset_tab(
                ui.nav("Alpha Diversity", ui.output_plot("alpha_plot")),
                ui.nav("Beta Diversity",
                      ui.output_plot("beta_plot"),
                      ui.output_text_verbatim("permanova")),
                ui.nav("Differential Abundance",
                      ui.output_data_frame("diff_table"))
            )
        )
    )
)

def server(input, output, session):
    @reactive.Calc
    def processed_data():
        return ro.r("process_microbiome_data()")
    
    @output
    @render.plot
    def alpha_plot():
        if input.run_analysis() == 0:
            return
        alpha_df = ro.r("alpha_diversity")(processed_data(), input.alpha_metric())
        return ro.r("create_alpha_plot")(alpha_df, input.alpha_metric())
    
    @output
    @render.plot
    def beta_plot():
        if input.run_analysis() == 0:
            return
        beta_res = ro.r("beta_diversity")(processed_data(), "bray")
        return ro.r("create_ordination_plot")(beta_res)
    
    @output
    @render.text
    def permanova():
        if input.run_analysis() == 0:
            return ""
        permanova_out = ro.r("permanova_test")(processed_data(), "bray")
        return "\n".join(list(permanova_out))
    
    @output
    @render.data_frame
    def diff_table():
        if input.run_analysis() == 0:
            return
        with localconverter(ro.default_converter + pandas2ri.converter):
            res = ro.r("diff_abundance")(processed_data())
            return render.DataTable(res, filters=True, summary=False)

app = App(app_ui, server)

```

