---
title: "Microbiome Data Explorer MVP"
author: "PA 1"
output: flexdashboard::flex_dashboard
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
library(vegan)
library(reshape2)
library(gridExtra)
library(rmarkdown)

# **Increase maximum upload size to 10MB (adjust as needed)**
options(shiny.maxRequestSize = 10 * 1024^2)

# Define static choices (will be updated dynamically)
taxonomic_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
alpha_diversity_indices <- c("Chao1", "Simpson", "Shannon")
```

# {.sidebar}

```{r}
fileInput("otu_file", "Upload OTU Table (CSV):", accept = ".csv")
fileInput("metadata_file", "Upload Metadata (CSV):", accept = ".csv")

hr() # Horizontal rule for visual separation
strong("Data Filters")
br()
br()

# Dynamic Taxonomic Level Input (UI defined in server)
uiOutput("tax_level_ui")

# Dynamic Metadata Grouping Input (UI defined in server)
uiOutput("metadata_group_ui")

# Alpha Diversity Indices Input (Static)
checkboxGroupInput("alpha_indices", "Alpha Diversity Indices:",
    choices = alpha_diversity_indices,
    selected = "Shannon"
)

hr() # Separator before download
downloadLink("download_report", "Export Report as PDF")
```

```{r}
# Reactive data for OTU table
uploaded_otu_table <- reactive({
    req(input$otu_file)
    tryCatch(
        {
            read.csv(input$otu_file$datapath, row.names = 1, stringsAsFactors = FALSE)
        },
        error = function(e) {
            validate(need(FALSE, "Invalid OTU Table CSV file. Please upload a valid CSV."))
            NULL
        }
    )
})

# Reactive data for metadata
uploaded_metadata <- reactive({
    req(input$metadata_file)
    tryCatch(
        {
            read.csv(input$metadata_file$datapath, stringsAsFactors = FALSE)
        },
        error = function(e) {
            validate(need(FALSE, "Invalid Metadata CSV file. Please upload a valid CSV."))
            NULL
        }
    )
})

# Reactive taxonomic levels (dynamic choices)
reactive_taxonomic_levels <- reactive({
    otu_data <- uploaded_otu_table()
    if (!is.null(otu_data)) {
        tax_cols <- intersect(taxonomic_levels, names(otu_data))
        return(tax_cols)
    } else {
        return(NULL)
    }
})

# Reactive metadata columns (dynamic choices)
reactive_metadata_cols <- reactive({
    metadata_data <- uploaded_metadata()
    if (!is.null(metadata_data)) {
        return(names(metadata_data)[-1])
    } else {
        return(NULL)
    }
})

# Dynamic UI outputs for selectors (in sidebar)
observeEvent(uploaded_otu_table(), {
    output$tax_level_ui <- renderUI(
        selectInput("tax_level", "Taxonomic Level:",
            choices = reactive_taxonomic_levels(),
            selected = if (!is.null(reactive_taxonomic_levels())) reactive_taxonomic_levels()[1] else NULL
        )
    )
})

observeEvent(uploaded_otu_table(), {
    output$metadata_group_ui <- renderUI(
        selectInput("metadata_group", "Group by Metadata:",
            choices = reactive_metadata_cols(),
            selected = if (!is.null(reactive_metadata_cols())) reactive_metadata_cols()[1] else NULL
        )
    )
})
```

```{r}
# **DELAYED downloadHandler INITIALIZATION using observeEvent**
observeEvent(uploaded_otu_table(), {
    output$download_report <- downloadHandler(
        filename = function() {
            paste0("microbiome-report-", Sys.Date(), ".pdf")
        },
        content = function(file) {
            temp_report <- tempfile(fileext = ".Rmd")

            report_content <- paste(
                "---",
                "title: 'Microbiome Analysis Report'",
                "output: pdf_document",
                "params:",
                " data: NA",
                " metadata: NA",
                " tax_level: 'Genus'",
                " metadata_group: 'Timepoint'",
                " alpha_indices: c('Shannon')",
                "---",
                "",
                "```{r setup_report, include=FALSE}",
                "library(ggplot2)",
                "library(dplyr)",
                "library(vegan)",
                "library(reshape2)",
                "library(gridExtra)",
                "otu_data <- params$data",
                "metadata_data <- params$metadata",
                "tax_level <- params$tax_level",
                "metadata_group <- params$metadata_group",
                "alpha_indices <- params$alpha_indices",
                "count_cols <- names(otu_data)[grepl('^[AB]\\\\d{4}$', names(otu_data))]",
                "```",
                "",
                "## Alpha Diversity Analysis",
                "",
                "```{r alpha_div_plots_pdf, echo=FALSE, fig.width=8, fig.height=6}",
                "# Prepare data for diversity calculation in PDF report",
                "tax_level_data <- otu_data %>% select(all_of(tax_level))", # Select taxonomic level
                "count_data <- otu_data %>% select(all_of(count_cols))", # Select count columns

                "# Calculate Alpha Diversity (in PDF report)",
                "alpha_div_results_pdf <- data.frame(SampleID = colnames(count_data))",
                "if ('Chao1' %in% alpha_indices) { alpha_div_results_pdf$Chao1 <- estimateR(t(count_data), model = 'Chao1')[1,] }",
                "if ('Simpson' %in% alpha_indices) { alpha_div_results_pdf$Simpson <- diversity(t(count_data), index = 'simpson') }",
                "if ('Shannon' %in% alpha_indices) { alpha_div_results_pdf$Shannon <- diversity(t(count_data), index = 'shannon') }",
                "# Merge with metadata (in PDF report)",
                "merged_data_pdf <- merge(alpha_div_results_pdf, metadata_data, by.x = 'SampleID', by.y = 'SampleID')",
                "# Prepare plot data for PDF report",
                "plot_data_long_pdf <- merged_data_pdf %>%",
                # Corrected line below - using all_of for metadata_group and alpha_indices
                "  select(SampleID, all_of(metadata_group), all_of(alpha_indices)) %>%",
                "  melt(id.vars = c('SampleID', metadata_group),",
                "      variable.name = 'Diversity_Index',",
                "      value.name = 'Diversity_Value')",
                "# Generate and print boxplots in PDF report",
                "plots <- lapply(alpha_indices, function(index) {",
                " ggplot(plot_data_long_pdf %>% filter(Diversity_Index == index), ",
                "      aes_string(x = metadata_group, y = 'Diversity_Value', fill = metadata_group)) +",
                "   geom_boxplot() +",
                "   theme_minimal() +",
                "   labs(title = paste('Alpha Diversity (', index, ') at', tax_level, 'Level'),",
                "        x = metadata_group, y = 'Diversity Value')",
                "})",
                "do.call(grid.arrange, c(plots, ncol = 1))",
                "```",
                "",
                "## Data Summary (First Few Rows of OTU Table)",
                "",
                "```{r data_summary_table_pdf, echo=FALSE}",
                "knitr::kable(head(otu_data))",
                "```",
                sep = "\n"
            )

            writeLines(report_content, temp_report)

            rmarkdown::render(
                input = temp_report,
                output_file = file,
                params = list(
                    data = isolate(uploaded_otu_table()),
                    metadata = isolate(uploaded_metadata()),
                    tax_level = isolate(input$tax_level),
                    metadata_group = isolate(input$metadata_group),
                    alpha_indices = isolate(input$alpha_indices)
                ),
                envir = new.env(parent = globalenv())
            )
        }
    )
})

```

# Dashboard

## Alpha Diversity

```{r}
renderPlot({
    req(input$tax_level, input$metadata_group, input$alpha_indices, uploaded_otu_table(), uploaded_metadata())

    otu_data <- uploaded_otu_table()
    metadata_data <- uploaded_metadata()

    tax_level_data <- otu_data %>%
        select(all_of(input$tax_level))
    count_data <- otu_data %>%
        select(starts_with("A"), starts_with("B"))

    alpha_div_results <- data.frame(SampleID = colnames(count_data))

    if ("Chao1" %in% input$alpha_indices) {
        alpha_div_results$Chao1 <- estimateR(t(count_data), model = "Chao1")[1, ]
    }
    if ("Simpson" %in% input$alpha_indices) {
        alpha_div_results$Simpson <- diversity(t(count_data), index = "simpson")
    }
    if ("Shannon" %in% input$alpha_indices) {
        alpha_div_results$Shannon <- diversity(t(count_data), index = "shannon")
    }

    merged_data <- merge(alpha_div_results, metadata_data, by.x = "SampleID", by.y = "SampleID")

    plot_data_long <- merged_data %>%
        select(SampleID, input$metadata_group, input$alpha_indices) %>%
        melt(
            id.vars = c("SampleID", input$metadata_group),
            variable.name = "Diversity_Index",
            value.name = "Diversity_Value"
        )

    ggplot(plot_data_long, aes_string(x = input$metadata_group, y = "Diversity_Value", fill = input$metadata_group)) +
        geom_boxplot() +
        facet_wrap(~Diversity_Index, scales = "free_y") +
        theme_minimal() +
        labs(
            title = paste("Alpha Diversity at", input$tax_level, "Level"),
            x = input$metadata_group,
            y = "Diversity Value"
        )
})
```

# Data Table

```{r}
renderDataTable({
    req(uploaded_otu_table(), input$tax_level)
    otu_data <- uploaded_otu_table()

    # Create SampleID column from rownames and then select columns
    otu_table_display <- otu_data %>%
        mutate(SampleID = rownames(otu_data)) %>% # Create SampleID from rownames
        select(SampleID, input$tax_level, everything()) # Select SampleID, tax level, and all other columns

    datatable(otu_table_display,
        options = list(pageLength = 10, scrollX = TRUE)
    )
})
```