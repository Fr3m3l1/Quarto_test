---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
output: flexdashboard::flex_dashboard
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(palmerpenguins)

# Load penguins dataset
data(penguins)
```

# {.sidebar}

```{r}
# Species filter
checkboxGroupInput("species", "Species:",
    choices = unique(penguins$species),
    selected = unique(penguins$species)
)

# Island filter
checkboxGroupInput("islands", "Islands:",
    choices = unique(penguins$island),
    selected = unique(penguins$island)
)

# Distribution type
selectInput("dist", "Distribution:", choices = c("kde", "hist"))

# Rug marks toggle
checkboxInput("rug", "Show rug marks", value = FALSE)

# PDF Export
downloadLink("download_report", "Export Report as PDF")


filtered_data <- reactive({
    req(input$species, input$islands)

    penguins %>%
        filter(
            species %in% input$species,
            island %in% input$islands
        ) %>%
        na.omit()
})

# **DELAYED downloadHandler INITIALIZATION using observeEvent**
observeEvent(filtered_data(), { # Trigger when filtered_data() is available
    output$download_report <- downloadHandler(
        filename = function() {
            paste0("penguins-report-", Sys.Date(), ".pdf")
        },
        content = function(file) {
            # TemporÃ¤re Rmd-Datei erstellen
            temp_report <- tempfile(fileext = ".Rmd")

            # Rmd-Content Template zeilenweise definieren
            report_content <- paste(
                "---",
                "title: 'Penguins Analysis Report'",
                "output: pdf_document",
                "params:",
                "  data: NA",
                "  dist: 'kde'",
                "  rug: FALSE",
                "---",
                "",
                "```{r setup_report, include=FALSE}",
                "library(ggplot2)",
                "library(dplyr)",
                "data <- params$data",
                "dist <- params$dist",
                "rug <- params$rug",
                "```",
                "",
                "## Bill Analysis",
                "",
                "```{r, echo=FALSE}",
                "# Depth plot",
                "p_depth <- ggplot(data, aes(x = bill_depth_mm, fill = species)) +",
                "  theme_minimal() +",
                "  (if(dist == 'hist') geom_histogram(position = 'identity', alpha = 0.5)",
                "   else geom_density(alpha = 0.5)) +",
                "  (if(rug) geom_rug()) +",
                "  labs(title = 'Bill Depth Distribution')",
                "",
                "# Length plot",
                "p_length <- ggplot(data, aes(x = bill_length_mm, fill = species)) +",
                "  theme_minimal() +",
                "  (if(dist == 'hist') geom_histogram(position = 'identity', alpha = 0.5)",
                "   else geom_density(alpha = 0.5)) +",
                "  (if(rug) geom_rug()) +",
                "  labs(title = 'Bill Length Distribution')",
                "",
                "gridExtra::grid.arrange(p_depth, p_length, ncol = 1)",
                "```",
                "",
                "## Data Summary",
                "",
                "```{r, echo=FALSE}",
                "knitr::kable(head(data))",
                "```",
                sep = "\n"
            )

            writeLines(report_content, temp_report)

            # Report mit den aktuellen Parametern rendern
            rmarkdown::render(
                input = temp_report,
                output_file = file,
                params = list(
                    data = isolate(filtered_data()),
                    dist = isolate(input$dist),
                    rug = isolate(input$rug)
                ),
                envir = new.env(parent = globalenv())
            )
        }
    )
})
```

# Plots

## Bill Depth

```{r}
renderPlot({
    req(filtered_data())
    p <- ggplot(filtered_data(), aes(x = bill_depth_mm, fill = species)) +
        theme_minimal()

    if (input$dist == "hist") {
        p <- p + geom_histogram(position = "identity", alpha = 0.5)
    } else {
        p <- p + geom_density(alpha = 0.5)
    }

    if (input$rug) {
        p <- p + geom_rug()
    }

    p + labs(x = "Bill Depth (mm)", y = "Count")
})
```

```{r}
div(
    style = "text-align: center; margin-top: 20px;",
    downloadButton("download_report", "Download Report as PDF",
        class = "btn-primary", style = "width: 80%;"
    )
)
```

## Bill Length

```{r}
renderPlot({
    req(filtered_data())
    p <- ggplot(filtered_data(), aes(x = bill_length_mm, fill = species)) +
        theme_minimal()

    if (input$dist == "hist") {
        p <- p + geom_histogram(position = "identity", alpha = 0.5)
    } else {
        p <- p + geom_density(alpha = 0.5)
    }

    if (input$rug) {
        p <- p + geom_rug()
    }

    p + labs(x = "Bill Length (mm)", y = "Count")
})
```

# Data

```{r}
renderDataTable({
    req(filtered_data())
    filtered_data()
})
```
